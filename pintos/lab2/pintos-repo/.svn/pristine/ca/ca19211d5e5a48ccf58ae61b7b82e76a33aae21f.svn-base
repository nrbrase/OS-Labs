#include "userprog/syscall.h"
//1518886046250407618
#include <stdio.h>
#include <syscall-nr.h>
#include "threads/interrupt.h"
#include "threads/thread.h"

static void syscall_handler (struct intr_frame *);
static void syscall_write (struct intr_frame *);
static void syscall_exit (struct intr_frame *);

void
syscall_init (void) 
{
  intr_register_int (0x30, 3, INTR_ON, syscall_handler, "syscall");
}

static void
syscall_handler (struct intr_frame *f UNUSED) 
{
	int *sp = f->esp;
	switch(*sp)	{	
		case SYS_EXIT:
			syscall_exit(f);
			printf ("1write call!\n");
			break;
		case SYS_HALT:
			printf ("2write call!\n");
			break;
		case SYS_EXEC:
			printf ("3write call!\n");
			break;
		case SYS_WAIT:
			printf ("4write call!\n");
			break;
		case SYS_CREATE:
			printf ("5write call!\n");
			break;
		case SYS_REMOVE:
			printf ("6write call!\n");
			break;
		case SYS_OPEN:
			printf ("7write call!\n");
			break;
		case SYS_FILESIZE:
			printf ("8write call!\n");
			break;
		case SYS_READ:
			printf ("9write call!\n");
			break;
		case SYS_WRITE:
			syscall_write(f);
			printf ("1111write call!\n");
			break;
		case SYS_SEEK:
			printf ("10write call!\n");
			break;
		case SYS_TELL:
			printf ("11write call!\n");
			break;
		case SYS_CLOSE:
			printf ("12write call!\n");
			break;
		default:
			printf ("13system call!\n");
			thread_exit ();
	}
}
static void
syscall_write(struct intr_frame *f){
	int *sp = f->esp;
	int fd= *(sp+1);
	char *buffer = *(sp+2);
	int size = *(sp+3);
	//printf("hmmmm.\n");
	struct thread *t = thread_current();
	//TODO check user's buffer. can't trust it.
	if(fd==1){
		f->eax = size;
		while(size>100){
			putbuf(buffer,100);
			buffer=buffer+100;
			size=size-100;

		}
		putbuf(buffer,size);
	}
	else if(t->files[fd] != NULL){
		f->eax = file_write(t->files[fd],buffer, size);
	}
	else{
		f->eax =-1;
	}
}
static void
syscall_exit(struct intr_frame *f){
	f->eax=1;
	thread_exit();

}

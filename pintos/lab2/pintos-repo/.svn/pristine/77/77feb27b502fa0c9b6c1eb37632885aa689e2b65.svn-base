#include "userprog/syscall.h"
//1518886046250407618
#include <stdio.h>
#include <syscall-nr.h>
#include "threads/interrupt.h"
#include "threads/thread.h"
#include "threads/vaddr.h"
static void syscall_handler (struct intr_frame *);
static void syscall_write (struct intr_frame *);
static void syscall_exit (struct intr_frame *);
bool copy_data(uint8_t *udst, uint8_t *src, int size);
void
syscall_init (void) 
{
  intr_register_int (0x30, 3, INTR_ON, syscall_handler, "syscall");
}

static void
syscall_handler (struct intr_frame *f UNUSED) 
{
	int *sp = f->esp;
	switch(*sp)	{	
		case SYS_EXIT:
			syscall_exit(f);
			/* printf ("1write call!\n"); */
			break;
		case SYS_HALT:
			/* printf ("2write call!\n"); */
			break;
		case SYS_EXEC:
			/* printf ("3write call!\n"); */
			break;
		case SYS_WAIT:
			/* printf ("4write call!\n"); */
			break;
		case SYS_CREATE:
			/* printf ("5write call!\n"); */
			break;
		case SYS_REMOVE:
			/* printf ("6write call!\n"); */
			break;
		case SYS_OPEN:
			/* printf ("7write call!\n"); */
			break;
		case SYS_FILESIZE:
			/* printf ("8write call!\n"); */
			break;
		case SYS_READ:
			/* printf ("9write call!\n"); */
			break;
		case SYS_WRITE:
			syscall_write(f);
			/* printf ("1111write call!\n"); */
			break;
		case SYS_SEEK:
			/* printf ("10write call!\n"); */
			break;
		case SYS_TELL:
			/* printf ("11write call!\n"); */
			break;
		case SYS_CLOSE:
			/* printf ("12write call!\n"); */
			break;
		default:
			/* printf ("13system call!\n"); */
			thread_exit ();
	}
}
static void
syscall_write(struct intr_frame *f){
	int *sp = f->esp;
	int fd= *(sp+1);
	char *buffer = *(sp+2);
	int size = *(sp+3);
	//printf("hmmmm.\n");
	struct thread *t = thread_current();
	//TODO check user's buffer. can't trust it.
	if(fd==1){
		f->eax = size;
		while(size>100){
			putbuf(buffer,100);
			buffer=buffer+100;
			size=size-100;

		}
		putbuf(buffer,size);
	}
	else if(t->files[fd] != NULL){
		f->eax = file_write(t->files[fd],buffer, size);
	}
	else{
		f->eax =-1;
	}
}
static void
syscall_exit(struct intr_frame *f){
	f->eax=1;
	printf("%s: exit(%d)\n", thread_name(),f->error_code);
	thread_exit();

}


/* Reads a byte at user virtual address UADDR.
   UADDR must be below PHYS_BASE.
   Returns the byte value if successful, -1 if a segfault
   occurred. */

static bool
check_pointer(uint8_t *userpointer,int size){
  if(((int)userpointer)<PHYS_BASE &&
     ((int)userpointer+size)<PHYS_BASE)
  return true;
  else return false;

}

static int
get_user (const uint8_t *uaddr)
{
  ASSERT((int)uaddr<PHYS_BASE);
  int result;
  asm ("movl $1f, %0; movzbl %1, %0; 1:"
       : "=&a" (result) : "m" (*uaddr));
  return result;
}
 
/* Writes BYTE to user address UDST.
   UDST must be below PHYS_BASE.
   Returns true if successful, false if a segfault occurred. */
static bool
put_user (uint8_t *udst, uint8_t byte)
{
  
  ASSERT((int)udst<PHYS_BASE);
  int error_code;
  asm ("movl $1f, %0; movb %b2, %1; 1:"
       : "=&a" (error_code), "=m" (*udst) : "q" (byte));
  return error_code != -1;
}

bool copy_data(uint8_t *udst, uint8_t *src, int size)
{
  int i =0;
  for(;i<size;i++){
    if(put_user(udst+i,src+i)==false)
      return false;
  }
  return true;
}
